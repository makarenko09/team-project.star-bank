package org.skypro.star.bot;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.request.SendMessage;
import org.skypro.star.configuration.BotProperties;
import org.skypro.star.model.Recommendation;
import org.skypro.star.model.RecommendationAnswerUser;
import org.skypro.star.service.RecommendationRuleSetImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.event.EventListener;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Service
public class StarTelegramBot {

    private final TelegramBot bot;
    private final BotProperties botProperties;
    private final RecommendationRuleSetImpl recommendationService;
    private final Logger log = LoggerFactory.getLogger(StarTelegramBot.class);

    public StarTelegramBot(BotProperties botProperties,
                           RecommendationRuleSetImpl recommendationService) {
        this.botProperties = botProperties;
        this.recommendationService = recommendationService;
        this.bot = new TelegramBot(botProperties.getToken());
    }

    @EventListener(ApplicationReadyEvent.class)
    public void init() {
        bot.setUpdatesListener(updates -> {
            updates.forEach(this::processUpdate);
            return UpdatesListener.CONFIRMED_UPDATES_ALL;
        });
        log.info("Telegram bot initialized successfully");
    }

    private void processUpdate(Update update) {
        if (update.message() == null || update.message().text() == null) {
            return;
        }

        Long chatId = update.message().chat().id();
        String text = update.message().text();

        try {
            if ("/start".equals(text)) {
                sendWelcomeMessage(chatId);
            } else if (text.startsWith("/recommend")) {
                processRecommendCommand(chatId, text);
            } else {
                sendHelpMessage(chatId);
            }
        } catch (Exception e) {
            log.error("Error processing Telegram message", e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
        }
    }

    private void sendWelcomeMessage(Long chatId) {
        String message = """
            üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ START BankBot! üåü
            
            –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º.
            
            –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
            /recommend –ò–º—è–§–∞–º–∏–ª–∏—è
            
            –ù–∞–ø—Ä–∏–º–µ—Ä: /recommend –ò–≤–∞–Ω–ò–≤–∞–Ω–æ–≤
            """;
        sendMessage(chatId, message);
    }

    private void sendHelpMessage(Long chatId) {
        String message = """
            ‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            
            /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
            /recommend –ò–º—è–§–∞–º–∏–ª–∏—è - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            –ü—Ä–∏–º–µ—Ä: /recommend –ü–µ—Ç—Ä–ü–µ—Ç—Ä–æ–≤
            """;
        sendMessage(chatId, message);
    }

    private void processRecommendCommand(Long chatId, String text) {
        String[] parts = text.split(" ", 2);
        if (parts.length < 2) {
            sendMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /recommend Ivanov_Ivan");
            return;
        }

        String username = parts[1].trim();
        getRecommendationsForUser(chatId, username);
    }

    private void getRecommendationsForUser(Long chatId, String username) {
        try {
            RecommendationAnswerUser recommendations = recommendationService.getRecommendationsByUsername(username);

            if (recommendations.getRecommendations().isEmpty()) {
                sendMessage(chatId, "–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + username + " –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π");
            } else {
                String message = formatRecommendationsMessage(username, recommendations);
                sendMessage(chatId, message);
            }

        } catch (Exception e) {
            log.error("Error getting recommendations for user: {}", username, e);
            sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '" + username + "' –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }

    private String formatRecommendationsMessage(String username, RecommendationAnswerUser recommendations) {
        StringBuilder sb = new StringBuilder();
        sb.append("‚ú® –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ").append(username).append("!\n\n");
        sb.append("–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n");

        List<Recommendation> recs = recommendations.getRecommendations();
        if (recs.isEmpty()) {
            sb.append("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤–∞—Å –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.");
        } else {
            for (int i = 0; i < recs.size(); i++) {
                Recommendation rec = recs.get(i);
                sb.append(i + 1).append(". ").append(rec.getName()).append("\n");
                sb.append("   ").append(rec.getText()).append("\n\n");
            }
        }

        return sb.toString();
    }

    private void sendMessage(Long chatId, String message) {
        SendMessage request = new SendMessage(chatId, message);
        bot.execute(request);
    }
}